<project name="w4m.tool.lcmsmatching" default="all">

	<dirname property="this.dir" file="${ant.file.w4m.tool.lcmsmatching}"/>

	<tstamp/>
	<property name="TIMESTAMP" value="true"/>
	<property name="VERSION" value="true"/>
	<property name="DIST.TEST" value="true"/>
	<property name="timestamp" value="${DSTAMP}-${TSTAMP}"/>
	<property name="PKG.PREFIX" value="w4m-tool-lcmsmatching"/>
	<property name="pkg.ext" value="tar.gz"/>
	<property name="version" value="2.1.3"/>
	<property name="dist.dir" value="dist"/>
	<property name="dist.test.dir" value="dist-test"/>
	<property name="tool.xml" value="lcmsmatching-filedb.xml"/>

	<!-- Define package name -->
	<condition property="timestamp.suffix" value="" else="-${timestamp}">
		<isfalse value="${TIMESTAMP}"/>
	</condition>
	<condition property="version.suffix" value="" else="-${version}">
		<isfalse value="${VERSION}"/>
	</condition>
	<property name="pkg.name" value="${PKG.PREFIX}${version.suffix}${timestamp.suffix}"/>

	<!--~~~
	~ ALL ~
	~~~~~-->

	<target name="all"/>

	<!-- DIST -->
	<target name="dist" depends="dist.code,dist.tar,dist.filedb.test"/>

	<target name="dist.w4m" depends="dist.code,w4m.filedb.code,dist.tar,dist.filedb.test"/>

	<!-- DIST FILE DB TEST -->
	<target name="dist.filedb.test" if="${DIST.TEST}">

		<!-- Make temp dir -->
		<delete dir="${dist.dest.dir}"/>
		<mkdir dir="${dist.test.dir}"/>

		<!-- Extract package in temp dir -->
		<untar src="${dist.dir}/${pkg.name}.tar.gz" dest="${dist.test.dir}" compression="gzip"/>
		<chmod file="${dist.test.dir}/search-mz" perm="u+x"/> <!-- This file should be already executable, since it has been put executable inside the tar. It seems the untar task of Ant does not handle the file permissions. -->

		<!-- Run search-mz on sample input file -->
		<exec executable="${dist.test.dir}/search-mz" failonerror="true">
			<arg value="-d"/>
			<arg value="file"/>
			<arg value="--url"/>
			<arg value="r-msdb/test/filedb.tsv"/>
			<arg value="-m"/>
			<arg value="pos"/>
			<arg value="-i"/>
			<arg value="r-msdb/test/mzrt-input.tsv"/>
			<arg value="-o"/>
			<arg value="mzrt-output.tsv"/>
		</exec>

	</target>

	<!-- W4M FILE DB CODE -->
	<target name="w4m.filedb.code">
		<exec executable="r-msdb/search-mz" failonerror="true" outputproperty="input.fields">
			<arg value="--print-input-col-names"/>
		</exec>
		<exec executable="r-msdb/search-mz" failonerror="true" outputproperty="output.fields">
			<arg value="--print-output-col-names"/>
		</exec>
		<exec executable="r-msdb/search-mz" failonerror="true" outputproperty="pos.prec">
			<arg value="--print-pos-prec"/>
		</exec>
		<exec executable="r-msdb/search-mz" failonerror="true" outputproperty="neg.prec">
			<arg value="--print-neg-prec"/>
		</exec>
		<exec executable="r-msdb/search-mz" failonerror="true" outputproperty="db.fields">
			<arg value="--print-db-fields"/>
		</exec>
		<exec executable="r-msdb/search-mz" failonerror="true" outputproperty="db.ms.modes">
			<arg value="--print-db-ms-modes"/>
		</exec>
		<copy file="${tool.xml}" tofile="${dist.dir}/lcmsmatching.xml">
			<filterchain>
				<tokenfilter>
					<replacestring from="@INPUT_FIELDS@" to="${input.fields}"/>
					<replacestring from="@OUTPUT_FIELDS@" to="${output.fields}"/>
					<replacestring from="@POS_PREC@" to="${pos.prec}"/>
					<replacestring from="@NEG_PREC@" to="${neg.prec}"/>
					<replacestring from="@DB_FIELDS@" to="${db.fields}"/>
					<replacestring from="@DB_MS_MODES@" to="${db.ms.modes}"/>
				</tokenfilter>
			</filterchain>
		</copy>
		<copy file="lcmsmatching-readme.md" tofile="${dist.dir}/README.md"/>
	</target>

	<!-- DIST CODE -->
	<target name="dist.code">

		<!-- Copy project code -->
		<delete dir="${dist.dir}/code"/>
		<mkdir dir="${dist.dir}/code"/>
		<copy todir="${dist.dir}/code">
			<fileset dir="r-msdb" includes="search-mz,*.R"/>
			<fileset dir="r-lib" includes="*.R"/> <!-- dependency -->
			<fileset dir="r-biodb" includes="*.R"/> <!-- dependency -->
		</copy>

		<!-- Update paths -->
		<replace dir="${dist.dir}/code">
			<replacefilter token="../r-lib/" value=""/>
			<replacefilter token="../r-biodb/" value=""/>
			<replacefilter token="'..', 'r-lib', " value=""/>
			<replacefilter token="'..', 'r-biodb', " value=""/>
		</replace>

	</target>

	<!-- DIST TAR -->
	<target name="dist.tar">

		<!-- Build tar file -->
		<tar destfile="${dist.dir}/${pkg.name}.tar.gz" compression="gzip">

			<!-- Include Galaxy XML and README files -->
			<tarfileset dir="${dist.dir}">
				<include name="lcmsmatching.xml"/>
				<include name="README.md"/>
			</tarfileset>

			<!-- Include script with execution rights -->
			<tarfileset dir="${dist.dir}/code" filemode="755">
				<include name="search-mz"/>
			</tarfileset>

			<!-- Include remaining R code -->
			<tarfileset dir="${dist.dir}/code">
				<include name="**"/>
				<exclude name="search-mz"/>
			</tarfileset>
		</tar>
	</target>

	<!-- CLEAN -->
	<target name="clean">
		<delete dir="${dist.dir}"/>
		<delete dir="${dist.test.dir}"/>
	</target>

	<!-- TEST -->
	<target name="test" depends="planemo.lint,planemo.test"/>

	<!-- PLANEMO LINT -->
	<target name="planemo.lint" depends="planemo.env">
		<exec executable="planemo" dir="${dist.dir}/code" failonerror="true">
			<arg value="lint"/>
			<arg value="${tool.xml}"/>
		</exec>
	</target>

	<!-- PLANEMO TEST -->
	<target name="planemo.test" depends="planemo.env">

		<exec executable="planemo" dir="${dist.dir}/code" failonerror="true">
			<arg value="conda_install"/>
			<arg value="${tool.xml}"/>
		</exec>

		<exec executable="planemo" dir="${dist.dir}/code" failonerror="true">
			<arg value="test"/>
			<arg value="--galaxy_branch"/>
			<arg value="release_16.01"/>
			<arg value="--conda_dependency_resolution"/>
			<arg value="${tool.xml}"/>
		</exec>
	</target>

	<target name="planemo.env" depends="dist.code">
		<chmod file="${dist.dir}/code/search-mz" perm="u+x"/>
		<copy file="${tool.xml}" todir="${dist.dir}/code"/>
		<ant dir="r-msdb/test" target="input.files"/>
		<mkdir dir="${dist.dir}/code/test-data"/>
		<copy todir="${dist.dir}/code/test-data">
			<fileset dir="r-msdb/test" includes="filedb.tsv"/>
			<fileset dir="r-msdb/test" includes="mz-input-small.tsv"/>
			<fileset dir="r-msdb/test/res" includes="filedb-small-mz-match-*"/>
		</copy>
	</target>

	<!--~~~~~~~~~~~~~
	~ UPDATE W4M VM ~
	~~~~~~~~~~~~~~-->

	<!-- This task is used when developping, for updating quickly the tool inside the local W4M virtual machine. -->
	<target name="update.w4m.vm" depends="clean,dist">

		<property name="w4m.login" value="galaxy@w4m"/>
		<property name="tool.path" value="galaxy-pfem/tools/metabolomics/annotation/lcmsmatching"/>

		<!-- Stop Galaxy -->
		<exec executable="ssh" failonerror="true">
			<arg value="${w4m.login}"/>
			<arg value="/sbin/service galaxy stop"/>
		</exec>

		<!-- Remove current tool version -->
		<exec executable="ssh" failonerror="true">
			<arg value="${w4m.login}"/>
			<arg value="rm -rf ${tool.path}"/>
		</exec>

		<!-- Remove old packages on W4M instance -->
		<exec executable="ssh" failonerror="true">
			<arg value="${w4m.login}"/>
			<arg value="rm -f ${PKG.PREFIX}-*.${pkg.ext}"/>
		</exec>

		<!-- Copy new package on W4M instance -->
		<exec executable="scp" failonerror="true">
			<arg value="${dist.dir}/${pkg.name}.${pkg.ext}"/>
			<arg value="${w4m.login}:."/>
		</exec>

		<!-- Make tool directory -->
		<exec executable="ssh" failonerror="true">
			<arg value="${w4m.login}"/>
			<arg value="mkdir -p ${tool.path}"/>
		</exec>

		<!-- Install new tool version -->
		<exec executable="ssh" failonerror="true">
			<arg value="${w4m.login}"/>
			<arg value="tar -xzf ${pkg.name}.${pkg.ext} -C ${tool.path}"/>
		</exec>

		<!-- Restart Galaxy -->
		<exec executable="ssh" failonerror="true">
			<arg value="${w4m.login}"/>
			<arg value="/sbin/service galaxy start"/>
		</exec>

	</target>

</project>
