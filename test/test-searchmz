#!/bin/bash
# vi: fdm=marker

# Constants {{{1
################################################################

PROG_NAME=$(basename $0)
SCRIPT_PATH=$(dirname $0)
RES_DIR=$SCRIPT_PATH/res
SEARCHMZ=$SCRIPT_PATH/../search-mz
SEP="\t"
PEAKFOREST_URL='https://peakforest-alpha.inra.fr/rest'

# Check {{{1
################################################################

function check {

	local testfct=$1

	# Run test
	echo -n "$testfct ... "
	test_output=$($testfct 2>&1)

	# Failure
	exit_code=$?
	if [ $exit_code -gt 0 ] ; then
		echo failure in $PROG_NAME. 
}

# Get column index  {{{1
################################################################

function get_col_index {

	file=$1
	col_name=$2

	n=$(head -n 1 "$file" | tr "$SEP" "\n" | egrep -n "^\"?${col_name}\"?\$" | sed 's/:.*$//')

	echo $n
}

# Count values {{{1
################################################################

function count_values {

	file=$1
	col=$2

	col_index=$(get_col_index $file $col)
	[[ $col_index -gt 0 ]] || return 1
	nb_values=$(awk "{if (NR > 1 && \$$col_index != \"NA\") {++n}} END{print n}" $file)

	echo $nb_values
}

# Get number of columns {{{1
################################################################

function get_nb_cols {

	file=$1

	echo $(head -n 1 "$file" | tr "$SEP" "\n" | wc -l)
}

# Get number of rows {{{1
################################################################

function get_nb_rows {

	file=$1

	echo $(wc -l <$1)
}

# Expect identical columns {{{1
################################################################

function expect_identical_cols {

	col=$1
	file1=$2
	file2=$3

	col1=$(get_col_index $file1 $col)
	col2=$(get_col_index $file2 $col)
	ncols_file1=$(get_nb_cols $file1)
	((col2 = col2 + ncols_file1))
	ident=$(paste $file1 $file2 | awk "BEGIN{eq=1}{if (\$$col1 != \$$col2) eq=0}END{print eq}")

	[[ $iden -eq 1 ]] || return 1
}

# Test filedb RT unit {{{1
################################################################

function test_filedb_rtunit {

	res_name=filedb
	res_dir=$RES_DIR/$res_name
	nb_match=

	# Loop on all RT units for database
	for db_rtunit in sec min ; do

		# Set path to database file
		db_file=$res_dir/filedb-rt$db_rtunit.tsv

		# Loop on all RT units for input file
		for input_rtunit in sec min ; do

			# Set path to input and output files
			input_file=$res_dir/mzrt-input-$input_rtunit.tsv
			main_output=$SCRIPT_PATH/$res_name-$db_rtunit-input-$input_rtunit-main.tsv
			peak_output=$SCRIPT_PATH/$res_name-$db_rtunit-input-$input_rtunit-peak.tsv
			html_output=$SCRIPT_PATH/$res_name-$db_rtunit-input-$input_rtunit-peak.html

			# Run program
			$SEARCHMZ -d file --url $db_file --db-rt-unit $db_rtunit -m pos -p 5 -s 0 -i $input_file --input-col-names 'mz=mz,rt=rt' -o $main_output --peak-output-file $peak_output --html-output-file $html_output --rtunit $input_rtunit --all-cols --rttolx 5 --rttoly 0.8 --check-cols --same-rows --same-cols --no-main-table-in-html-output --debug || return 1

			# Check outputs
			[[ -f $main_output ]] || return 1
			[[ -f $peak_output ]] || return 1
			[[ -f $html_output ]] || return 1

			# Check COMPOUND IDs NA values in main output
			nb_main_compids=$(count_values $main_output compoundid)
			[[ $nb_main_compids -gt 0 ]] || return 1

			# Check COMPOUND IDs NA values in peak output
			nb_peak_compids=$(count_values $peak_output compoundid)
			[[ $nb_peak_compids -gt 0 ]] || return 1

			if [[ -z $nb_match ]] ; then
				nb_match=$nb_peak_compids
			else
				[[ $nb_peak_compids -eq $nb_match ]] || return 1
			fi
		done
	done
}

# Test ticket 2016031010000034 {{{1
################################################################

function test_ticket_2016031010000034 {

	db_file=$RES_DIR/ticket-2016031010000034-database_CEA_test_2_utf8.tsv
	input_file=$RES_DIR/ticket-2016031010000034-input_file_for_db_test_2.tsv
	main_output=$SCRIPT_PATH/ticket-2016031010000034-output.tsv
	peak_output=$SCRIPT_PATH/ticket-2016031010000034-output-peaks.tsv
	html_output=$SCRIPT_PATH/ticket-2016031010000034-output.html

	$SEARCHMZ -d file --url $db_file -m pos -i $input_file --input-col-names mz=mzmed,rt=rtmed -o $main_output --peak-output-file $peak_output --html-output-file $html_output || return 1
}

# Test Peakforest Estelle 14/03/2017 {{{1
################################################################

function test_peakforest_estelle_20170314 {

	input_file=$RES_DIR/peakforest.estelle.20170314-input.tsv
	main_output=$SCRIPT_PATH/peakforest.estelle.20170314-output.tsv
	peak_output=$SCRIPT_PATH/peakforest.estelle.20170314-output-peaks.tsv
	html_output=$SCRIPT_PATH/peakforest.estelle.20170314-output.html

	$SEARCHMZ -d peakforest --url $PEAKFOREST_URL --db-token $RMSBD_PEAKFOREST_TOKEN -m pos -p 5 -s 0 -i $input_file --input-col-names mz=mzmed,rt=rtmed -o $main_output --peak-output-file $peak_output --html-output-file $html_output || return 1
}

function test_peakforest_estelle_20170316_rtunit {

	res_name=2017-03-16-estelle-rtunit
	res_dir=$RES_DIR/$res_name
	min_input=$res_dir/min-input.tsv
	min_main_output=$SCRIPT_PATH/$res_name-min-main.tsv
	min_peak_output=$SCRIPT_PATH/$res_name-min-peak.tsv
	min_html_output=$SCRIPT_PATH/$res_name-min-peak.html
	sec_input=$res_dir/sec-input.tsv
	sec_main_output=$SCRIPT_PATH/$res_name-sec-main.tsv
	sec_peak_output=$SCRIPT_PATH/$res_name-sec-peak.tsv
	sec_html_output=$SCRIPT_PATH/$res_name-sec-peak.html

	$SEARCHMZ -d peakforest --url $PEAKFOREST_URL --db-token $RMSBD_PEAKFOREST_TOKEN -m pos -p 5 -s 0 -i $min_input --input-col-names mz=mzmed,rt=rtmed -o $min_main_output --peak-output-file $min_peak_output --html-output-file $min_html_output --rtunit min --all-cols --rttolx 5 --rttoly 0.8 --check-cols --same-rows --same-cols --no-main-table-in-html-output

	$SEARCHMZ -d peakforest --url $PEAKFOREST_URL --db-token $RMSBD_PEAKFOREST_TOKEN -m pos -p 5 -s 0 -i $sec_input --input-col-names mz=mzmed,rt=rtmed -o $sec_main_output --peak-output-file $sec_peak_output --html-output-file $sec_html_output --rtunit sec --all-cols --rttolx 5 --rttoly 0.8 --check-cols --same-rows --same-cols --no-main-table-in-html-output

	# Check that output file contains at least same matches
	nb_sec_peak_compids=$(count_values $sec_peak_output compoundid)
	[[ $nb_sec_peak_compids -gt 0 ]] || return 1
	nb_min_peak_compids=$(count_values $min_peak_output compoundid)
	[[ $nb_min_peak_compids -gt 0 ]] || return 1
	[[ $(get_nb_cols $sec_peak_output) -eq $(get_nb_cols $min_peak_output) ]] || return 1
	[[ $(get_nb_rows $sec_peak_output) -eq $(get_nb_rows $min_peak_output) ]] || return 1
	expect_identical_cols compoundid $sec_peak_output $min_peak_output || return 1

	# Checkout RT output values
	echo YEP
	return 1
#	min.in <- read.table(min.input, header = TRUE, sep = "\t", stringsAsFactors = FALSE)
#	sec.in <- read.table(sec.input, header = TRUE, sep = "\t", stringsAsFactors = FALSE)
#	checkTrue(nrow(min.in) == 1)
#	checkTrue(nrow(sec.in) == 1)
#	checkTrue('rtmed' %in% colnames(min.peaks))
#	checkTrue('rtmed' %in% colnames(sec.peaks))
#	checkTrue(all(abs(min.peaks[['rtmed']] - min.in[['rtmed']]) < 1e-10))
#	checkTrue(all(abs(sec.peaks[['rtmed']] - sec.in[['rtmed']]) < 1e-10))
#	sec.main <- read.table(sec.main.output, header = TRUE, sep = "\t", stringsAsFactors = FALSE)
#	min.main <- read.table(min.main.output, header = TRUE, sep = "\t", stringsAsFactors = FALSE)
#	checkTrue('rtmed' %in% colnames(min.main))
#	checkTrue('rtmed' %in% colnames(sec.main))
#	checkTrue(all(abs(min.main[['rtmed']] - min.in[['rtmed']]) < 1e-10))
#	checkTrue(all(abs(sec.main[['rtmed']] - sec.in[['rtmed']]) < 1e-10))
}

# Main {{{1
################################################################

check test_ticket_2016031010000034
check test_peakforest_estelle_20170314
check test_filedb_rtunit
check test_peakforest_estelle_20170316_rtunit
